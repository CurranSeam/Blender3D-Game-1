##############################################################
# Water surface GLSL shader for BGE v1.0
# by Martins Upitis (martinsh) (devlog-martinsh.blogspot.com)
##############################################################

from bge import logic as g
from bge import render as r
import bgl

cont = g.getCurrentController()
own = cont.owner

VertexShader = """

attribute vec4 Tangent;
varying vec4 fragPos;
varying vec3 T, B, N; //tangent binormal normal
varying vec3 viewPos;
varying vec2 texCoord;

void main() 
{
	vec3 pos = vec3(gl_Vertex);
	
	T   = Tangent.xyz;
	B   = cross(gl_Normal, Tangent.xyz);
	N   = gl_Normal; 

    texCoord = gl_MultiTexCoord0.xy;
    fragPos = ftransform();
    viewPos = pos - gl_ModelViewMatrixInverse[3].xyz;
    gl_Position = ftransform();
}

"""

FragmentShader = """

varying vec4 fragPos; //fragment coordinates
varying vec3 T, B, N; //tangent binormal normal
varying vec3 viewPos;
varying vec2 texCoord;

uniform float timer;
uniform sampler2D reflectionSampler,refractionSampler,normalSampler;

vec2 windDir = vec2(-3.0, 1.0); //wind direction XY
float speed = 0.2;
vec4 waves = vec4(16.0, 8.0, 4.0, 2.0);
float scale = 50.0; //overall wave scale

float choppy = 0.25; //wave choppyness
float aberration = 0.002;
float bump = 0.6; //overall bump
float reflBump = 0.4; //reflection distortion amount
float refrBump = 0.3; //refraction distortion amount
vec3 sunPos = vec3(0.0,700.0,300.0);

float scatterAmount = 2.0;

vec3 tangentSpace(vec3 v)
{
	vec3 vec;
	vec.xy=v.xy;
	vec.z=sqrt(1.0-dot(vec.xy,vec.xy));
	vec.xyz= normalize(vec.x*T+vec.y*B+vec.z*N);
	return vec;
}

void main() {
   
    vec2 fragCoord = (fragPos.xy/fragPos.w)*0.5+0.5;
    fragCoord = clamp(fragCoord,0.002,0.998);

	//normal map
	vec2 nCoord = vec2(0.0); //normal coords
 
 	nCoord = texCoord * (scale * 0.15) + windDir * timer * (speed*0.1);
	vec3 normal0 = 2.0 * texture2D(normalSampler, nCoord + vec2(-timer*0.02,-timer*0.03)).rgb - 1.0;

	nCoord = texCoord * (scale * 0.5) + windDir * timer * (speed*0.2)-normal0.xy*choppy;
	vec3 normal1 = 2.0 * texture2D(normalSampler, nCoord + vec2(+timer*0.03,+timer*0.02)).rgb - 1.0;
  
  	nCoord = texCoord * (scale* 1.5) + windDir * timer * (speed*0.5)-normal1.xy*choppy;
	vec3 normal2 = 2.0 * texture2D(normalSampler, nCoord + vec2(-timer*0.03,+timer*0.04)).rgb - 1.0;
   
    nCoord = texCoord * (scale * 4.0) + windDir * timer * (speed*0.7)-normal2.xy*choppy;
    vec3 normal3 = 2.0 * texture2D(normalSampler, nCoord + vec2(+timer*0.04,-timer*0.02)).rgb - 1.0;

	
	
	vec3 normal = normalize(normal0 * waves.x + normal1 * waves.y +
						    normal2 * waves.z + normal3 * waves.w);

    //normal.x = -normal.x; //in case you need to invert Red channel
    //normal.y = -normal.y; //in case you need to invert Green channel
   
    vec3 nVec = tangentSpace(normal*bump); //converting normals to tangent space    
    vec3 vVec = normalize(viewPos);
    vec3 lVec = normalize(sunPos);
    //normal for light scattering
    vec3 lNormal = tangentSpace(normalize(normal0 * waves.x + normal1 * waves.y));
	vec3 lR = reflect(lVec, lNormal);
	float s = max(dot(lR, vVec), 0.0);
    vec3 lightScatter = max(dot(-lVec,lNormal)*0.8+0.2,0.0)*vec3(0.1, 0.9, 0.9)*scatterAmount*s;
    
    //fresnel term
    float R0 = pow((1.0-1.33)/(1.0+1.33),2.0); 
    float cosine = abs(dot(-vVec,nVec)); 
    float fresnel = R0 + (1.0-R0)*pow(1.0-cosine,5.0); 
   
    //texture edge bleed removal
    float fade = 12.0;
    vec2 distortFade = vec2(0.0);
    distortFade.s = clamp(fragCoord.s*fade,0.0,1.0);
    distortFade.s -= clamp(1.0-(1.0-fragCoord.s)*fade,0.0,1.0);
    distortFade.t = clamp(fragCoord.t*fade,0.0,1.0);
    distortFade.t -= clamp(1.0-(1.0-fragCoord.t)*fade,0.0,1.0); 
    
    vec3 reflection = texture2D(reflectionSampler, fragCoord+(nVec.st*reflBump*distortFade)).rgb;
    
    vec3 luminosity = vec3(0.30, 0.59, 0.11);
	float reflectivity = pow(dot(luminosity, reflection.rgb*2.0),3.0);

    vec3 R = reflect(vVec, nVec);

    float specular = pow(max(dot(R, lVec), 0.0),450.0)*reflectivity;

    vec2 rcoord = reflect(vVec,nVec).st;
    vec3 refraction = vec3(0.0);
    
    refraction.r = texture2D(refractionSampler, (fragCoord-(nVec.st*refrBump*distortFade))*1.0).r;
    refraction.g = texture2D(refractionSampler, (fragCoord-(nVec.st*refrBump*distortFade))*1.0-(rcoord*aberration)).g;
    refraction.b = texture2D(refractionSampler, (fragCoord-(nVec.st*refrBump*distortFade))*1.0-(rcoord*aberration*2.0)).b;
    
    float WaterDepth = 5.0;
    vec3 WaterExt = 1.0-vec3(0.7, 0.85, 0.88);
    
    vec3 Absorbance = WaterExt * -WaterDepth;
    vec3 Transmittance = (refraction) * exp(Absorbance);

    vec3 color = mix(Transmittance+lightScatter,reflection,clamp(fresnel,0.0,1.0));
    
    gl_FragColor = vec4(color+specular,1.0);
 
}
"""

mesh = own.meshes[0]
for mat in mesh.materials:
	shader = mat.getShader()
	if shader != None:
		if not shader.isValid():
			shader.setSource(VertexShader, FragmentShader, 1)
		shader.setAttrib(g.SHD_TANGENT)
		shader.setSampler('reflectionSampler',0)
		shader.setSampler('refractionSampler',1)
		shader.setSampler('normalSampler',2)
		shader.setUniform1f('timer',own['timer'])
		#shader.setSampler('diffuseSampler',3)